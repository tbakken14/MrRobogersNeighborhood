Describe: getBeepBoopCountingArray()

Test: "It should return an array with length equal to 1 plus the users input"
Code: getBeepBoopCountingArray(5).length;
Expected Output: 6

Test: "It should count from 0 to the input number, replacing numbers with translateBeepBoop"
Code: getBeepBoopCountingArray(5);
Expected Output: [0, "Beep!", "Boop!", "Won't you be my neighbor?", 4, 5]

Test: "It should count from 0 to the input number, replacing numbers with translateBeepBoop"
Code: getBeepBoopCountingArray(14);
Expected Output: [0, "Beep", "Boop!", "Won't you be my neighbor?", 4, 5, 6, 7, 8, 9, "Beep!", "Beep!", "Boop!", "Won't you be my neighbor?", "Beep!"]


Descibe: translateBeepBoop()

Test: "For numbers that contain a 1, all digits are replaced with "Beep!"
Code: translateBeepBoop(1);
Expected Output: "Beep!"

Test: "For numbers that contain a 1, all digits are replaced with "Beep!"
Code: translateBeepBoop(11);
Expected Output: "Beep!"

Test: "For numbers that contain a 1, all digits are replaced with "Beep!"
Code: translateBeepBoop(109);
Expected Output: "Beep!"

Test: For numbers that contain a 2, all digits are replaced with "Boop!"
Code: translateBeepBoop(2);
Expected Output: "Boop!"

Test: For numbers that contain a 2, all digits are replaced with "Boop!"
Code: translateBeepBoop(24);
Expected Output: "Boop!"

Test: For numbers that contain a 2, all digits are replaced with "Boop!"
Code: translateBeepBoop(2099);
Expected Output: "Boop!"

Test: For numbers that contain a 3, all digits are replaced with "Won't you be my neighbor?"
Code: translateBeepBoop(3);
Expected Output: "Won't you be my neighbor?"

Test: For numbers that contain a 3, all digits are replaced with "Won't you be my neighbor?"
Code: translateBeepBoop(39);
Expected Output: "Won't you be my neighbor?"

Test: For numbers that contain a 3, all digits are replaced with "Won't you be my neighbor?"
Code: translateBeepBoop(8763);
Expected Output: "Won't you be my neighbor?"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(12);
Expected Output: "Boop!"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(13);
Expected Output: "Won't you be my neighbor?"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(123);
Expected Output: "Won't you be my neighbor?"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(213);
Expected Output: "Won't you be my neighbor?"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(321);
Expected Output: "Won't you be my neighbor?"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(1311);
Expected Output: "Won't you be my neighbor?"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(1211);
Expected Output: "Boop!"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(1112);
Expected Output: "Boop!"

Test: Higher digit substitutions take precedent over lower digit substitions
Code: translateBeepBoop(211);
Expected Output: "Boop!"

Test: For numbers not containing a critical digit, return the original number
Code: translateBeepBoop(0);
Expected Output: 0

Test: For numbers not containing a critical digit, return the original number
Code: translateBeepBoop(4);
Expected Output: 4

Test: For numbers not containing a critical digit, return the original number
Code: translateBeepBoop(5);
Expected Output: 5

Test: For numbers not containing a critical digit, return the original number
Code: translateBeepBoop(6);
Expected Output: 6

Test: For numbers not containing a critical digit, return the original number
Code: translateBeepBoop(7890);
Expected Output: 7890

Test: For numbers not containing a critical digit, return the original number
Code: translateBeepBoop(4567890);
Expected Output: 4567890
